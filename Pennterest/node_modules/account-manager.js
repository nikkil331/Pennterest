var connectData = { 
		"hostname": "cis550zne.cbh8gmdnynf7.us-east-1.rds.amazonaws.com", 
		"user": "zne", 
		"password": "jacksonf", 
		"database": "PENNZNE" };

var oracle =  require("oracle");
var crypto = require('crypto');


/* login validation methods */

exports.autoLogin = function(user, pass, callback)
{
	var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
	console.log(userExists);
	connection.execute(userExists, [],
		function(err, uresult){
			if(err) {console.log(err); }
			else{
				console.log(uresult);
				if (uresult){
					uresult.pass == pass ? callback(uresult) : callback(null);
				} 
				else{
					callback(null);
				}
			}
	});
};

exports.manualLogin = function(user, pass, callback)
{
	var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
	console.log(userExists);
	connection.execute(userExists, [],
		function(err, uresult){
			if(err) {console.log(err); }
			else{
				console.log(uresult);
				if (uresult){
					validatePassword(pass, uresult.PASSWORD, function(err, res) {
						if (res){
							callback(null, uresult);
						}
						else{
							callback('invalid-password');
						}
					});
				} 
				else{
					callback(null);
				}
			}
	});
};

/* record insertion, update & deletion methods */

exports.addNewAccount = function(newData, callback)
{
	var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
	console.log(userExists);
	connection.execute(userExists, [],
			function(err, uresult){
				if(err) {console.log(err); }
				else{
					console.log(uresult);
					if (uresult){
						callback('email-taken');
					} 
					else{
						saltAndHash( newData.pass, 
								function(hash){
									newData.pass = hash;
									// append date stamp when record was created //
									newData.date = moment().format('MMMM Do YYYY, h:mm:ss a');
									accounts.insert(newData, {}, callback);
								});
					}
				}
		});
};

exports.updateAccount = function(newData, callback)
{
	accounts.findOne({user:newData.user}, function(e, o){
		o.name                 = newData.name;
		o.email         = newData.email;
		o.country         = newData.country;
		if (newData.pass == ''){
			accounts.save(o, {safe: true}, function(err) {
				if (err) callback(err);
				else callback(null, o);
			});
		}        else{
			saltAndHash(newData.pass, function(hash){
				o.pass = hash;
				accounts.save(o, {safe: true}, function(err) {
					if (err) callback(err);
					else callback(null, o);
				});
			});
		}
	});
};

exports.updatePassword = function(email, newPass, callback)
{
	accounts.findOne({email:email}, function(e, o){
		if (e){
			callback(e, null);
		}        else{
			saltAndHash(newPass, function(hash){
				o.pass = hash;
				accounts.save(o, {safe: true}, callback);
			});
		}
	});
};

/* account lookup methods */

exports.deleteAccount = function(id, callback)
{
	accounts.remove({_id: getObjectId(id)}, callback);
};

exports.getAccountByEmail = function(email, callback)
{
	accounts.findOne({email:email}, function(e, o){ callback(o); });
};

exports.validateResetLink = function(email, passHash, callback)
{
	accounts.find({ $and: [{email:email, pass:passHash}] }, function(e, o){
		callback(o ? 'ok' : null);
	});
};

exports.getAllRecords = function(callback)
{
	accounts.find().toArray(
			function(e, res) {
				if (e) callback(e);
				else callback(null, res);
			});
};

exports.delAllRecords = function(callback)
{
	accounts.remove({}, callback); // reset accounts collection for testing //
};

/* private encryption & validation methods */

var generateSalt = function()
{
	var set = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';
	var salt = '';
	for (var i = 0; i < 10; i++) {
		var p = Math.floor(Math.random() * set.length);
		salt += set[p];
	}
	return salt;
};

var md5 = function(str) {
	return crypto.createHash('md5').update(str).digest('hex');
};

var saltAndHash = function(pass, callback)
{
	var salt = generateSalt();
	callback(salt + md5(pass + salt));
};

var validatePassword = function(plainPass, hashedPass, callback)
{
	var salt = hashedPass.substr(0, 10);
	var validHash = salt + md5(plainPass + salt);
	callback(null, hashedPass === validHash);
};

/* auxiliary methods */

var getObjectId = function(id)
{
	return accounts.db.bson_serializer.ObjectID.createFromHexString(id);
};

var findById = function(id, callback)
{
	accounts.findOne({_id: getObjectId(id)},
			function(e, res) {
		if (e) callback(e);
		else callback(null, res);
	});
};


var findByMultipleFields = function(a, callback)
{
//	this takes an array of name/val pairs to search against {fieldName : 'value'} //
	accounts.find( { $or : a } ).toArray(
			function(e, results) {
				if (e) callback(e);
				else callback(null, results);
			});
};