var connectData = { 
		"hostname": "cis550zne.cbh8gmdnynf7.us-east-1.rds.amazonaws.com", 
		"user": "zne", 
		"password": "jacksonf", 
		"database": "PENNZNE" };

var oracle = require("oracle");
var crypto = require('crypto');


/* login validation methods */

exports.autoLogin = function(user, pass, callback)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
			console.log(userExists);
			connection.execute(userExists, [],
				function(err, uresult){
					if(err) {console.log(err); }
					else{
						console.log(uresult);
						if (uresult){
							uresult.pass == pass ? callback(uresult) : callback(null);
						} 
						else{
							callback(null);
						}
					}
			});
		}
	});
	
};

exports.manualLogin = function(user, pass, callback)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
			console.log(userExists);
			connection.execute(userExists, [],
				function(err, uresult){
					if(err) {console.log(err); }
					else {
						console.log(uresult[0]);
						if (uresult.length == 1){
							if (uresult[0].PASSWORD == "password") {
								console.log("Old password, need to fix...");
								fixUnhashedPassword(user, uresult[0].PASSWORD);
							}
							validatePassword(pass, uresult[0].PASSWORD, function(err, res) {
								if (res){ callback(null, uresult[0]); }
								else{ callback('invalid-password'); }
							});
						} 
						else{ callback(null); }
					}
			});
		}
	});
};

/* record insertion, update & deletion methods */

exports.addNewAccount = function(newUser, callback)
{
	var userExists = "(SELECT * FROM USERS WHERE email='"+newUser.email+"')";
	console.log(userExists);
	connection.execute(userExists, [],
			function(err, uresult){
				if(err) {console.log(err); }
				else{
					console.log(uresult);
					if (uresult){
						callback('email-taken');
					} 
					else{
						saltAndHash( newUser.pass, 
							function(hash){
								// append date stamp when record was created //
								newData.date = moment().format('MMMM Do YYYY, h:mm:ss a');
								var insertUser = "INSERT INTO USERS (userid, email, password) VALUES (seq_user_id.nextval, '"+newUser.email+"', '"+hash+"')";
								connection.execute(userExists, [],
									function(err, uresult){
										if(err) {console.log(err); }
										else{callback('success');}
								});
							});
					}
				}
		});
};

// don't need this yet
/*exports.updateAccount = function(newData, callback)
{
	accounts.findOne({user:newData.user}, function(e, o){
		o.name                 = newData.name;
		o.email         = newData.email;
		o.country         = newData.country;
		if (newData.pass == ''){
			accounts.save(o, {safe: true}, function(err) {
				if (err) callback(err);
				else callback(null, o);
			});
		}        else{
			saltAndHash(newData.pass, function(hash){
				o.pass = hash;
				accounts.save(o, {safe: true}, function(err) {
					if (err) callback(err);
					else callback(null, o);
				});
			});
		}
	});
};*/

// probably won't need this
/*exports.updatePassword = function(email, newPass, callback)
{
	accounts.findOne({email:email}, function(e, o){
		if (e){
			callback(e, null);
		}        else{
			saltAndHash(newPass, function(hash){
				o.pass = hash;
				accounts.save(o, {safe: true}, callback);
			});
		}
	});
};*/

/* private encryption & validation methods */

var generateSalt = function()
{
	var set = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';
	var salt = '';
	for (var i = 0; i < 10; i++) {
		var p = Math.floor(Math.random() * set.length);
		salt += set[p];
	}
	return salt;
};

var md5 = function(str) {
	return crypto.createHash('md5').update(str).digest('hex');
};

var saltAndHash = function(pass, callback)
{
	var salt = generateSalt();
	callback(salt + md5(pass + salt));
};

var validatePassword = function(plainPass, hashedPass, callback)
{
	var salt = hashedPass.substr(0, 10);
	var validHash = salt + md5(plainPass + salt);
	callback(null, hashedPass === validHash);
};

var fixUnhashedPassword = function(email, pass)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var salt = generateSalt();
			var hashedPass = salt + md5(pass + salt);
			var updateUser = "UPDATE USERS SET PASSWORD ='"+hashedPass+"' WHERE email ='"+email+"'";
			console.log(updateUser);
			connection.execute(updateUser, [], function(err, uresult){});
		}
	});
};